use_modular_headers!
require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

# @react-native-community/cli-platform-ios のパスを確認
cli_platform_ios_path = `node --print "require.resolve('@react-native-community/cli-platform-ios/package.json')"`.strip rescue nil
if cli_platform_ios_path && !cli_platform_ios_path.empty? && File.exist?(File.join(File.dirname(cli_platform_ios_path), "native_modules"))
  require File.join(File.dirname(cli_platform_ios_path), "native_modules")
else
  Pod::UI.warn "Warning: The required native_modules file for @react-native-community/cli-platform-ios is missing."
end

require 'json'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

ENV['RCT_NEW_ARCH_ENABLED'] = podfile_properties['newArchEnabled'] == 'true' ? '1' : '0'
ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] = '1' if podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR'] == 'true'

platform :ios, min_ios_version_supported
install! 'cocoapods',
  :deterministic_uuids => false

prepare_react_native_project!



# If Flipper is needed, set up its configuration properly
require_relative '../node_modules/react-native/scripts/react_native_pods'

# Check if @react-native-community/cli-platform-ios/native_modules exists before requiring it
cli_platform_ios_path = File.expand_path("../node_modules/@react-native-community/cli-platform-ios/native_modules", __dir__)
if File.exist?(cli_platform_ios_path)
  require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'
else
  Pod::UI.warn "Warning: @react-native-community/cli-platform-ios/native_modules is missing. Some native modules may not work correctly."
end



flipper_version = '0.125.0' # Update to the latest Flipper version if necessary

begin
  flipper_config = use_flipper!({ 'Flipper' => flipper_version })
rescue
  flipper_config = { 'Flipper' => 'disabled' } # Flipperが無効な場合のデフォルト設定
end


if ENV['NO_FLIPPER'] == '1'
  flipper_config = FlipperConfiguration.disabled
elsif podfile_properties.key?('ios.flipper') && podfile_properties['ios.flipper'] == 'false'
  flipper_config = FlipperConfiguration.disabled
end

target 'onsenmaching' do
  use_expo_modules!
  use_frameworks! :linkage => :static

  # Firebase Pods
  pod 'Firebase/Core'
  pod 'Firebase/Auth' # 必要に応じて他のFirebaseモジュールも追加
  pod 'Firebase/Storage' # バージョン指定を削除

  if ENV['EXPO_USE_COMMUNITY_AUTOLINKING'] == '1'
    config_command = ['node', '-e', "process.argv=['', '', 'config'];require('@react-native-community/cli').run()"];
  else
    config_command = [
      'node',
      '--no-warnings',
      '--eval',
      'require(require.resolve(\'expo-modules-autolinking\', { paths: [require.resolve(\'expo/package.json\')] }))(process.argv.slice(1))',
      'react-native-config',
      '--json',
      '--platform',
      'ios'
    ]
  end

  config = use_native_modules!(config_command)

  flags = get_default_flags()

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => podfile_properties['expo.jsEngine'] == nil || podfile_properties['expo.jsEngine'] == 'hermes',
    :fabric_enabled => flags[:fabric_enabled],
    :app_path => "#{Pod::Config.instance.installation_root}/.."
)


  post_install do |installer|
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false
    )

    # Xcode 14 resource bundle signing workaround
    installer.target_installation_results.pod_target_installation_results.each do |pod_name, target_installation_result|
      target_installation_result.resource_bundle_targets.each do |resource_bundle_target|
        resource_bundle_target.build_configurations.each do |config|
          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        end
      end
    end
  end

  post_integrate do |installer|
    begin
      expo_patch_react_imports!(installer)
    rescue => e
      Pod::UI.warn e
    end
  end
end
